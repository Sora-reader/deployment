version: '3'

services:
  nginx:
    build:
      dockerfile: Dockerfile
      context: nginx
    image: sora_nginx
    restart: unless-stopped
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:rw
      - backend_static:/volumes/static:ro
    ports:
      - 80:80
      - 443:443
    environment:
      - CERTBOT_EMAIL
      - BACKEND_DOMAIN
      - FRONTEND_DOMAIN
  
  backend:
    build:
      dockerfile: Dockerfile
      context: "$BACKEND_PATH"
    image: sora_backend
    restart: unless-stopped
    volumes:
      - backend_static:/app/staticfiles:rw
    expose:
      - 8000
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=0
      - DATABASE_HOST=postgres
      - DATABASE_USER=$POSTGRES_USER
      - DATABASE_PASSWORD=$POSTGRES_PASSWORD
      - DATABASE_NAME=$POSTGRES_DB
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - ALLOWED_HOSTS=localhost backend $BACKEND_DOMAIN
    env_file:
      - backend.env
    depends_on:
      - postgres
      - redis
      - elasticsearch

  frontend:
    build:
      dockerfile: Dockerfile
      context: "$FRONTEND_PATH"
      args:
        - SENTRY_LOG_LEVEL=info
        - SENTRY_DSN=$FRONTEND_SENTRY_DSN
        - SENTRY_URL=$FRONTEND_SENTRY_URL
        - SENTRY_ORG=$FRONTEND_SENTRY_ORG
        - SENTRY_PROJECT=$FRONTEND_SENTRY_PROJECT
        - SENTRY_AUTH_TOKEN=$FRONTEND_SENTRY_AUTH_TOKEN
    image: sora_frontend
    restart: unless-stopped
    expose:
      - 3000
    environment:
      - HOST=0.0.0.0
      - PORT=3000
      - NEXT_PUBLIC_BACKEND_URL=https://$BACKEND_DOMAIN
      - NEXT_PUBLIC_BACKEND_PORT=443
      - NEXT_PUBLIC_RESIZE_URL=$LINK_PREVIEW

  postgres:
    image: postgres:12
    expose:
      - 5432
    restart: unless-stopped
    volumes:
      - /var/lib/postgresql/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    healthcheck:
      # Wait for postgres to actually start before consider service 'healthy'
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s

  redis:
    image: redis
    expose:
      - 6379
    command: redis-server
    restart: unless-stopped
    volumes:
      - /var/lib/redis:/var/lib/redis
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1m
      timeout: 5s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.2
    expose:
      - 9200
    environment:
     - discovery.type=single-node
    volumes:
     - elasticsearch_volume:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          cpus: 0.50
          memory: 2048M

volumes:
  elasticsearch_volume:
  backend_static:
